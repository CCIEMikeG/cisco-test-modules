---

- name: TESTING NXOS_BGP_AF
  hosts: n9k2
  connection: local
  gather_facts: no

  vars:
      nxos_provider:
        username: "{{ un }}"
        password: "{{ pwd }}"
        transport: nxapi
        host: "{{ inventory_hostname }}"

  tasks:
  - name: remove the bgp process
    nxos_bgp:
      asn: 65535
      state: absent
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - name: instantiate ipv6 unicast address-family
    nxos_bgp_af:
      asn: 65535
      afi: ipv6
      safi: unicast
      vrf: test
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['afi'] == 'ipv6'
        - data.end_state['safi'] == 'unicast'
        - data.end_state['vrf'] == 'test'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv6
      safi: unicast
      vrf: test
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: advertise evpn routes into ipv6 unicast address-family
    nxos_bgp_af:
      asn: 65535
      afi: ipv6
      safi: unicast
      vrf: test
      advertise_l2vpn_evpn: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['afi'] == 'ipv6'
        - data.end_state['safi'] == 'unicast'
        - data.end_state['vrf'] == 'test'
        - data.end_state['advertise_l2vpn_evpn'] == true

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv6
      safi: unicast
      vrf: test
      advertise_l2vpn_evpn: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: advertise evpn routes into ipv4 unicast address-family
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      advertise_l2vpn_evpn: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['afi'] == 'ipv4'
        - data.end_state['safi'] == 'unicast'
        - data.end_state['vrf'] == 'test'
        - data.end_state['advertise_l2vpn_evpn'] == true

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      advertise_l2vpn_evpn: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: create vpnv4 unicast address-family
    nxos_bgp_af:
      asn: 65535
      afi: vpnv4
      safi: unicast
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['afi'] == 'vpnv4'
        - data.end_state['safi'] == 'unicast'
        - data.end_state['vrf'] == 'default'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: vpnv4
      safi: unicast
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data
    tags: test

  - assert:
      that:
        - data.changed == false

  - name: create l2vpn evpn address-family
    nxos_bgp_af:
      asn: 65535
      afi: l2vpn
      safi: evpn
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['afi'] == 'l2vpn'
        - data.end_state['safi'] == 'evpn'
        - data.end_state['vrf'] == 'default'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: l2vpn
      safi: evpn
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: remove l2vpn evpn address-family
    nxos_bgp_af:
      asn: 65535
      afi: l2vpn
      safi: evpn
      state: absent
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state == {}

  - name: turn on all booleans
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      additional_paths_install: true
      additional_paths_receive: true
      additional_paths_send: true
      advertise_l2vpn_evpn: true
      client_to_client: true
      dampening_state: true
      default_information_originate: true
      suppress_inactive: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['additional_paths_install'] == true
        - data.end_state['additional_paths_receive'] == true
        - data.end_state['additional_paths_send'] == true
        - data.end_state['advertise_l2vpn_evpn'] == true
        - data.end_state['client_to_client'] == true
        - data.end_state['dampening_state'] == true
        - data.end_state['default_information_originate'] == true
        - data.end_state['suppress_inactive'] == true

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      additional_paths_install: true
      additional_paths_receive: true
      additional_paths_send: true
      advertise_l2vpn_evpn: true
      client_to_client: true
      dampening_state: true
      default_information_originate: true
      suppress_inactive: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: configure custom distances and inject-maps
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      distance_ibgp: 60
      distance_ebgp: 50
      distance_local: 70
      inject_map:
        - [lax_inject_map, lax_exist_map]
        - [nyc_inject_map, nyc_exist_map, copy-attributes]
        - [fsd_inject_map, fsd_exist_map]
      provider: "{{ nxos_provider }}"
      state: present
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['distance_ibgp'] == "60"
        - data.end_state['distance_ebgp'] == "50"
        - data.end_state['distance_local'] == "70"

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      distance_ibgp: 60
      distance_ebgp: 50
      distance_local: 70
      inject_map:
        - [lax_inject_map, lax_exist_map]
        - [nyc_inject_map, nyc_exist_map, copy-attributes]
        - [fsd_inject_map, fsd_exist_map]
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: configure maximum paths and networks
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      maximum_paths: 2
      maximum_paths_ibgp: 3
      networks:
        - [10.0.0.0/16, routemap_LA]
        - [192.168.1.0/30, Chicago]
        - [192.168.2.0/24]
        - [192.168.3.0/24, routemap_NYC]
      provider: "{{ nxos_provider }}"
      state: present
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['maximum_paths'] == "2"
        - data.end_state['maximum_paths_ibgp'] == "3"

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      maximum_paths: 2
      maximum_paths_ibgp: 3
      networks:
        - [10.0.0.0/16, routemap_LA]
        - [192.168.1.0/30, Chicago]
        - [192.168.2.0/24]
        - [192.168.3.0/24, routemap_NYC]
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: configure redistribution
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      redistribute:
        - ['direct', 'rm_direct']
        - ['lisp', 'rm_lisp']
        - ['static', 'rm_static']
        - ['eigrp 1', 'rm_eigrp']
        - ['isis 2', 'rm_isis']
        - ['ospf 3', 'rm_ospf']
        - ['rip 4', 'rm_rip']
      provider: "{{ nxos_provider }}"
      state: present
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      vrf: test
      redistribute:
        - ['direct', 'rm_direct']
        - ['lisp', 'rm_lisp']
        - ['static', 'rm_static']
        - ['eigrp 1', 'rm_eigrp']
        - ['isis 2', 'rm_isis']
        - ['ospf 3', 'rm_ospf']
        - ['rip 4', 'rm_rip']
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: configure additional_paths_selection param
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      additional_paths_selection: test
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['additional_paths_selection'] == 'test'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      additional_paths_selection: test
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: configure dampen_igp_metric param
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampen_igp_metric: 1000
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['dampen_igp_metric'] == '1000'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampen_igp_metric: 1000
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: set dampen_igp_metric param to default
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampen_igp_metric: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['dampen_igp_metric'] == '600'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampen_igp_metric: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: set dampening timers
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_half_time: 30
      dampening_max_suppress_time: 200
      dampening_reuse_time: 200
      dampening_suppress_time: 2000
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['dampening_half_time'] == '30'
        - data.end_state['dampening_max_suppress_time'] == '200'
        - data.end_state['dampening_reuse_time'] == '200'
        - data.end_state['dampening_suppress_time'] == '2000'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_half_time: 30
      dampening_max_suppress_time: 200
      dampening_reuse_time: 200
      dampening_suppress_time: 2000
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: remove dampening timers
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_half_time: default
      dampening_max_suppress_time: default
      dampening_reuse_time: default
      dampening_suppress_time: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['dampening_half_time'] == ''
        - data.end_state['dampening_max_suppress_time'] == ''
        - data.end_state['dampening_reuse_time'] == ''
        - data.end_state['dampening_suppress_time'] == ''

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_half_time: default
      dampening_max_suppress_time: default
      dampening_reuse_time: default
      dampening_suppress_time: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: configure dampening_routemap, default_metric and next_hop_route_map
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_routemap: test
      default_metric: 1000
      next_hop_route_map: next_hop_test_map
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['dampening_routemap'] == 'test'
        - data.end_state['default_metric'] == '1000'
        - data.end_state['next_hop_route_map'] == 'next_hop_test_map'

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_routemap: test
      default_metric: 1000
      next_hop_route_map: next_hop_test_map
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: remove dampening_routemap, default_metric and next_hop_route_map
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_routemap: default
      default_metric: default
      next_hop_route_map: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['dampening_routemap'] == ''
        - data.end_state['default_metric'] == ''
        - data.end_state['next_hop_route_map'] == ''

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      dampening_routemap: default
      default_metric: default
      next_hop_route_map: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: configure table_map and filter
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      table_map: test
      table_map_filter: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['table_map'] == 'test'
        - data.end_state['table_map_filter'] == true

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      table_map: test
      table_map_filter: true
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false

  - name: remove table_map
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      table_map: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == true
        - data.end_state['table_map'] == ''
        - data.end_state['table_map_filter'] == false

  - name: idempotency check
    nxos_bgp_af:
      asn: 65535
      afi: ipv4
      safi: unicast
      table_map: default
      state: present
      provider: "{{ nxos_provider }}"
      m_facts: true
    register: data

  - assert:
      that:
        - data.changed == false
